package io.deephaven.benchmark.tests.standard.file;

import org.junit.jupiter.api.*;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;

/**
 * Standard tests for writing/reading multi-column parquet data to S3 without compression. To save time, the parquet
 * generated by the "write" tests is used by the "read" tests.
 */
@TestMethodOrder(OrderAnnotation.class)
@Tag("Iterate")
class S3ParquetMultiColTest {
    final String[] usedColumns = {"str10K", "long10K", "int10K", "short10K", "bigDec10K", "intArr5", "intVec5"};
    final FileTestRunner runner = new FileTestRunner(this);

    void setup(double rowCountFactor, int scaleFactor) {
        runner.setRequiredServices("deephaven", "minio");
        runner.setScaleFactors(rowCountFactor, scaleFactor);
    }

    @Test
    @Order(1)
    void writeMultiColNone() {
        setup(3, 3);
        var q = """
        write(
            source, 's3://data/source.ptr.parquet', special_instructions=s3.S3Instructions(
              region_name='aws-global', endpoint_override='http://minio:9000',
              credentials=s3.Credentials.basic('minioadmin', 'minioadmin'),
              connection_timeout='PT20S'
            )
        )
        """;
        runner.runWriteTest("S3ParquetWrite- No Codec Multi Col -Static", q, usedColumns);
    }

    @Test
    @Order(2)
    void readMultiColNone() {
        setup(3, 3);
        var q = """
        read('s3://data/source.ptr.parquet', special_instructions=s3.S3Instructions(
            region_name='aws-global', endpoint_override='http://minio:9000',
            credentials=s3.Credentials.basic('minioadmin', 'minioadmin'),
            read_timeout='PT20S', connection_timeout='PT20S'
        )).select()
        """;
        runner.runReadTest("S3ParquetRead- No Codec Multi Col -Static", q);
    }

    @Test
    @Order(3)
    void writePartitionedMultiColNone() {
        setup(2, 1);
        var q = """
        source = source.partition_by('short10K')
        write_partitioned(source, 's3://data/source.partitioned', special_instructions=s3.S3Instructions(
            region_name='aws-global', endpoint_override='http://minio:9000',
            credentials=s3.Credentials.basic('minioadmin', 'minioadmin'),
            connection_timeout='PT20S'
        ))
        """;
        runner.runWriteTest("S3PartitionedWrite- No Codec Multi Col -Static", q, usedColumns);
    }

    @Test
    @Order(4)
    void readPartitionedMultiColNone() {
        setup(2, 1);
        var q = """
        read('s3://data/source.partitioned', special_instructions=s3.S3Instructions(
            region_name='aws-global', endpoint_override='http://minio:9000',
            credentials=s3.Credentials.basic('minioadmin', 'minioadmin'),
            read_timeout='PT20S', connection_timeout='PT20S'
        )).select()
        """;
        runner.runReadTest("S3PartitionedRead- No Codec Multi Col -Static", q);
    }

}
